
public class J02_Method_main {

//	메소드 : 
//	- 사용도가 높은 기능을 작은 프로그램 단위로 만듦
//	- 메소드는 클래스 안쪽에 만들고, 메소드끼리는 서로 겹치지 않아야 한다.
//	- 메소드에서는 값의 이동 처리가 중요한데, 값을 받아들이는 입구를 매개변수 영역이라 하고 
//		값을 밖으로 전달하는 출구를 리턴 자료형이라고 한다.
	
	public static void main(String[] args) {
		J02_Car c1 = new J02_Car();
		
		setData(c1, "슈퍼카", 100);
		System.out.println("c1 : " + c1);
		showData(c1);
		
		J02_Car c2 = new J02_Car();
		setData(c2, "고물차", 10);
		showData(c2);
	}
	
	public static void setData(J02_Car gate, String n, int p){
		gate.name = n;
		gate.price = p;
	}
	
	public static void showData(J02_Car gate){
		System.out.println("gate : " + gate);
		System.out.println(gate.name+"의 가격은 " + gate.price + "원 입니다.");
	}
//	메소드 만드는 방법
//	1. 메소드가 해야 할 기능(일)을 우선적으로 정한다.
//	2. 결정된 기능에 따라 메소드의 이름을 정한다.
//	(의미있는 이름, 첫글자는 소문자로 시작)
//	3. 메소드의 기본 틀을 입력한다.
//	public static void 메서드이름(){
//	}
//	=> 소괄호는 메서드의 입구 영역이다.
//	=> 중괄호는 메서드의 기능이 명령되는 영역이다.
//	=> void 키워드는 메서드의 출구 영역이다.
//	4. 결정된 메서드의 기능에 따라 메서드가 복사받아야 할 값이 잇다면, 
//	메서드의 입구 영역에 통로를 만든다.
//	(메서드 입구 영역 : 매개 변수 영역 / 메서드 입구의 통로 : 매개변수)
//	- 입구의 통로는 복사받은 값의 형태에 따라 변수 선언 식으로 만든다.
//	- 통로가 여러개 필요한 경우, 각각을 쉼표로 구분한다.
//	복사받아야 할 값이 없다면, 입구에 통로를 만들지 않아야 한다.
//	5. 결정된 기능을 실행하는 명령들을 중괄호(메서드 몸) 안 쪽에 입력한다.
//	6. 결정된 기능에 따라 메서드 밖으로 복사시켜 전달해야 할 값이 있다면,
//	- 중괄호 안쪽 마지막에 return을 명시한 후, return 오른쪽에는 전달할 값을 입력한다.
//	- 메서드의 출구를 전달할 값에 대한 자료형으로 입력해야 한다.
//	메서드 밖으로 복사시켜야할 값이 없다면 return할 필요가 없고, 출구는 void 상태로 유지한다.
	
//	7. 완성된 메서드를 이용할 때에는 메서드의 이름과 입구 부분을 명령한다.
//	- 작성된 메서드가 복사받아야 할 값을 필요로 한다면, 반드시 값을 넣어야 한다.
//	- 작성된 메서드가 복사받아야 할 값을 필요로 하지 않는다면, 반드시 값을 넣지 말아야 한다.
//	- 메서드의 출구는 명령하지 않는다!
}
